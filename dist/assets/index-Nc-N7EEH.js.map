{"version":3,"file":"index-Nc-N7EEH.js","sources":["../../node_modules/date-fns/toDate.mjs","../../node_modules/date-fns/constructFrom.mjs","../../node_modules/date-fns/constants.mjs","../../node_modules/date-fns/_lib/defaultOptions.mjs","../../node_modules/date-fns/startOfWeek.mjs","../../node_modules/date-fns/startOfISOWeek.mjs","../../node_modules/date-fns/getISOWeekYear.mjs","../../node_modules/date-fns/startOfDay.mjs","../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../../node_modules/date-fns/differenceInCalendarDays.mjs","../../node_modules/date-fns/startOfISOWeekYear.mjs","../../node_modules/date-fns/isDate.mjs","../../node_modules/date-fns/isValid.mjs","../../node_modules/date-fns/startOfYear.mjs","../../node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../../node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../../node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../../node_modules/date-fns/locale/en-US/_lib/localize.mjs","../../node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../../node_modules/date-fns/locale/en-US/_lib/match.mjs","../../node_modules/date-fns/locale/en-US.mjs","../../node_modules/date-fns/getDayOfYear.mjs","../../node_modules/date-fns/getISOWeek.mjs","../../node_modules/date-fns/getWeekYear.mjs","../../node_modules/date-fns/startOfWeekYear.mjs","../../node_modules/date-fns/getWeek.mjs","../../node_modules/date-fns/_lib/addLeadingZeros.mjs","../../node_modules/date-fns/_lib/format/lightFormatters.mjs","../../node_modules/date-fns/_lib/format/formatters.mjs","../../node_modules/date-fns/_lib/format/longFormatters.mjs","../../node_modules/date-fns/_lib/protectedTokens.mjs","../../node_modules/date-fns/format.mjs","../../node_modules/date-fns/parseISO.mjs","../../src/modules/geocoding.ts","../../src/modules/weather.ts","../../src/modules/data.ts","../../src/modules/ui.ts","../../src/main.ts"],"sourcesContent":["/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { millisecondsInHour, millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  const timestamp = date.getTime();\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    const dirtyDate = new Date(timestamp + time);\n    // JS parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    const result = new Date(0);\n    result.setFullYear(\n      dirtyDate.getUTCFullYear(),\n      dirtyDate.getUTCMonth(),\n      dirtyDate.getUTCDate(),\n    );\n    result.setHours(\n      dirtyDate.getUTCHours(),\n      dirtyDate.getUTCMinutes(),\n      dirtyDate.getUTCSeconds(),\n      dirtyDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","type FetchedCoordinates = {\n  name: string;\n  latitude: string;\n  longitude: string;\n  country: string;\n  admin1: string;\n};\n\nexport default async function getCoordinates(location: string) {\n  try {\n    const response = await fetch(\n      `https://geocoding-api.open-meteo.com/v1/search?name=${location}&count=3&language=en&format=json`,\n      { mode: 'cors', cache: 'no-cache' },\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const coordinates = await response.json();\n    const coordinatesArray = coordinates.results.map(\n      (result: FetchedCoordinates) => ({\n        city: result.name,\n        latitude: result.latitude,\n        longitude: result.longitude,\n        country: result.country,\n        state: result.admin1,\n      }),\n    );\n    return coordinatesArray;\n  } catch (err) {\n    return [];\n  }\n}\n","import type { Coordinates } from './data';\n\nexport default async function getWeather(\n  coordinates: Coordinates[],\n  index: number,\n  unit: string,\n) {\n  // unit must be celsius or fahrenheit\n  try {\n    const { latitude, longitude } = coordinates[index];\n    if (coordinates === undefined || index === undefined) {\n      throw new Error(`Can't fetch coordinates!`);\n    }\n    const response = await fetch(\n      `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m,wind_gusts_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum,precipitation_probability_max,wind_speed_10m_max,wind_gusts_10m_max&temperature_unit=${unit}&timezone=auto`,\n      { mode: 'cors', cache: 'no-cache' },\n    );\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const weatherResults = await response.json();\n    return weatherResults;\n  } catch (err) {\n    return 'API-error';\n  }\n}\n","export type Coordinates = {\n  city: string;\n  latitude: string;\n  longitude: string;\n  country: string;\n  state: string;\n};\n\nconst defaultWeatherObject = {\n  latitude: 41.89,\n  longitude: 12.51,\n  generationtime_ms: 0.2580881118774414,\n  utc_offset_seconds: 3600,\n  timezone: 'Europe/Rome',\n  timezone_abbreviation: 'CET',\n  elevation: 54.0,\n  current_units: {\n    time: 'iso8601',\n    interval: 'seconds',\n    temperature_2m: '°C',\n    relative_humidity_2m: '%',\n    apparent_temperature: '°C',\n    precipitation: 'mm',\n    weather_code: 'wmo code',\n    wind_speed_10m: 'km/h',\n    wind_gusts_10m: 'km/h',\n  },\n  current: {\n    time: '2023-12-30T23:30',\n    interval: 900,\n    temperature_2m: 11.9,\n    relative_humidity_2m: 85,\n    apparent_temperature: 11.0,\n    precipitation: 0.0,\n    weather_code: 3,\n    wind_speed_10m: 4.6,\n    wind_gusts_10m: 7.2,\n  },\n  daily_units: {\n    time: 'iso8601',\n    weather_code: 'wmo code',\n    temperature_2m_max: '°C',\n    temperature_2m_min: '°C',\n    precipitation_sum: 'mm',\n    precipitation_probability_max: '%',\n    wind_speed_10m_max: 'km/h',\n    wind_gusts_10m_max: 'km/h',\n  },\n  daily: {\n    time: [\n      '2023-12-30',\n      '2023-12-31',\n      '2024-01-01',\n      '2024-01-02',\n      '2024-01-03',\n      '2024-01-04',\n      '2024-01-05',\n    ],\n    weather_code: [63, 53, 51, 51, 51, 3, 95],\n    temperature_2m_max: [15.9, 15.2, 15.5, 13.2, 14.9, 15.3, 14.5],\n    temperature_2m_min: [11.3, 10.9, 8.3, 4.9, 10.6, 4.7, 10.7],\n    precipitation_sum: [4.4, 2.6, 0.3, 0.4, 0.8, 0.0, 16.2],\n    precipitation_probability_max: [6, 35, 81, 20, 26, 10, 65],\n    wind_speed_10m_max: [8.6, 15.3, 15.5, 12.3, 19.1, 15.2, 21.0],\n    wind_gusts_10m_max: [18.7, 31.0, 31.0, 21.6, 32.8, 36.4, 43.2],\n  },\n};\n\nconst defaultCoordinatesArray = [\n  {\n    city: 'Rome',\n    latitude: '41.89193',\n    longitude: '12.51133',\n    country: 'Italy',\n    state: 'Latium',\n  },\n];\n\nlet weather = defaultWeatherObject;\nlet coordinates = defaultCoordinatesArray;\n\nfunction updateWeather(newWeather: typeof defaultWeatherObject | 'API-error') {\n  if (newWeather === 'API-error') {\n    return;\n  }\n  weather = newWeather;\n}\n\nfunction updateCoordinates(newCoordinates: Coordinates | 'API-error') {\n  if (newCoordinates === 'API-error') {\n    return;\n  }\n  coordinates = [newCoordinates];\n}\n\nfunction retrieveWeather() {\n  return weather;\n}\n\nfunction retrieveCoordinates() {\n  return coordinates;\n}\n\nexport {\n  updateWeather,\n  updateCoordinates,\n  defaultWeatherObject,\n  defaultCoordinatesArray,\n  retrieveWeather,\n  retrieveCoordinates,\n};\n","import { parseISO, format } from 'date-fns';\n\nimport getCoordinates from './geocoding';\nimport getWeather from './weather';\nimport {\n  Coordinates,\n  defaultWeatherObject,\n  updateWeather,\n  updateCoordinates,\n  retrieveWeather,\n  retrieveCoordinates,\n} from './data';\n\n// get time\nfunction getTime() {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n  const correctCurrentMinute =\n    currentMinute < 10 ? `0${currentMinute}` : currentMinute;\n  return `${currentHour}:${correctCurrentMinute}`;\n}\n\n// write time every 30 seconds\nconst showedTime =\n  document.querySelector<HTMLHeadingElement>('div.welcome > h3');\nfunction renderTime() {\n  if (showedTime === null) return;\n  const time = getTime();\n  showedTime.textContent = time;\n}\n\n// write welcome message\nconst welcomeMessage =\n  document.querySelector<HTMLHeadingElement>('div.welcome > h2');\nfunction setWelcome() {\n  if (welcomeMessage === null) return;\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  if (currentHour <= 12 && currentHour > 4) {\n    welcomeMessage.textContent = 'Good Morning';\n  } else if (currentHour > 12 && currentHour < 18) {\n    welcomeMessage.textContent = 'Good Afternoon';\n  } else if (currentHour >= 18 && currentHour <= 23) {\n    welcomeMessage.textContent = 'Good Evening';\n  } else {\n    welcomeMessage.textContent = 'Good Night';\n  }\n}\n\n// function for setting the right weather icon\nfunction selectWeatherDecoder(weatherCode: number) {\n  switch (weatherCode) {\n    case 0:\n      return ['wi-day-sunny', 'Sunny'];\n    case 1:\n    case 2:\n      return ['wi-day-cloudy', 'Partly cloudy'];\n    case 3:\n      return ['wi-cloud', 'Overcast'];\n    case 45:\n    case 48:\n      return ['wi-fog', 'Fog'];\n    case 51:\n    case 53:\n    case 55:\n      return ['wi-showers', 'Drizzle'];\n    case 56:\n    case 57:\n    case 66:\n    case 67:\n      return ['wi-sleet', 'Freezing drizzle'];\n    case 61:\n    case 63:\n    case 65:\n      return ['wi-rain', 'Rain'];\n    case 71:\n    case 73:\n    case 75:\n    case 77:\n    case 85:\n    case 86:\n      return ['wi-snow', 'Snow'];\n    case 80:\n    case 81:\n    case 82:\n      return ['wi-sprinkle', 'Rain showers'];\n    case 95:\n      return ['wi-thunderstorm', 'Thunderstorm'];\n    case 96:\n    case 99:\n      return ['wi-storm-showers', 'Thunderstorm with hail'];\n    default:\n      return '';\n  }\n}\n\n// selection of the day must be stored\nlet selectedDay = 0;\n\n// UI render\nfunction renderMain(\n  weatherObject: typeof defaultWeatherObject,\n  coordinatesArray: Coordinates[],\n) {\n  // display city\n  const selectedLocation = document.querySelector('main > h2')!;\n  selectedLocation.textContent = `${coordinatesArray[0].city}, ${coordinatesArray[0].country}`;\n  const mainTemperature = document.getElementById('main-temperature')!;\n  mainTemperature.textContent = `${parseInt(\n    weatherObject.daily.temperature_2m_max[selectedDay].toString(),\n    10,\n  )}${weatherObject.daily_units.temperature_2m_max}`;\n  const dayWeatherCode = Number(weatherObject.daily.weather_code[selectedDay]);\n  const [dayWeatherArrayIcon, dayWeatherArrayText] =\n    selectWeatherDecoder(dayWeatherCode);\n  const mainWeatherCode = document.getElementById('main-weather-code');\n  const paraTextWeather =\n    mainWeatherCode?.querySelector<HTMLParagraphElement>(':first-child');\n  if (paraTextWeather === null || paraTextWeather === undefined) return;\n  paraTextWeather.textContent = dayWeatherArrayText;\n  const oldParaIconWeather = mainWeatherCode?.querySelector(':nth-child(2)');\n  if (oldParaIconWeather) {\n    oldParaIconWeather.remove();\n  }\n  const paraIconWeather = document.createElement('p');\n  paraIconWeather.classList.add('weather-code-icon');\n  paraIconWeather.classList.add('wi');\n  paraIconWeather.classList.add(dayWeatherArrayIcon);\n  mainWeatherCode?.appendChild(paraIconWeather);\n  // labels\n  const labelTemp = document.getElementById('label-temp');\n  const minTemp = labelTemp?.querySelector<HTMLParagraphElement>(\n    '#label-temp > div > p:nth-child(1)',\n  );\n  if (minTemp)\n    minTemp.textContent = `Min: ${parseInt(\n      weatherObject.daily.temperature_2m_min[selectedDay].toString(),\n      10,\n    )}${weatherObject.daily_units.temperature_2m_min}`;\n  const maxTemp = labelTemp?.querySelector(\n    '#label-temp > div > p:nth-child(2)',\n  );\n  if (maxTemp)\n    maxTemp.textContent = `Max: ${parseInt(\n      weatherObject.daily.temperature_2m_max[selectedDay].toString(),\n      10,\n    )}${weatherObject.daily_units.temperature_2m_max}`;\n  const labelPrec = document.getElementById('label-prec');\n  const precProb = labelPrec?.querySelector(\n    '#label-prec > div > p:nth-child(1)',\n  );\n  if (precProb)\n    precProb.textContent = `Prob.: ${weatherObject.daily.precipitation_probability_max[selectedDay]}%`;\n  const precTotal = labelPrec?.querySelector(\n    '#label-prec > div > p:nth-child(2)',\n  );\n  if (precTotal)\n    precTotal.textContent = `Total: ${weatherObject.daily.precipitation_sum[selectedDay]} mm`;\n  const labelWind = document.getElementById('label-wind');\n  const windSpeed = labelWind?.querySelector(\n    '#label-wind > div > p:nth-child(1)',\n  );\n  if (windSpeed)\n    windSpeed.textContent = `Speed: ${parseInt(\n      weatherObject.daily.wind_speed_10m_max[selectedDay].toString(),\n      10,\n    )} km/h`;\n  const gustsSpeed = labelWind?.querySelector(\n    '#label-wind > div > p:nth-child(2)',\n  );\n  if (gustsSpeed)\n    gustsSpeed.textContent = `Gusts: ${parseInt(\n      weatherObject.daily.wind_gusts_10m_max[selectedDay].toString(),\n      10,\n    )} km/h`;\n}\n\nfunction renderCards(weatherObject: typeof defaultWeatherObject) {\n  const dayCards = document.querySelectorAll<HTMLDivElement>('.day-card');\n  dayCards.forEach((card, index) => {\n    if (index > 0) {\n      const date = parseISO(weatherObject.daily.time[index]);\n      const dayOfTheWeek = format(date, 'eee');\n      const paraDay = card.querySelector<HTMLParagraphElement>(':first-child');\n      if (paraDay === null) return;\n      paraDay.textContent = dayOfTheWeek;\n    }\n    const dayTemp = weatherObject.daily.temperature_2m_max[index].toString();\n    const tempUnit = weatherObject.daily_units.temperature_2m_max;\n    const paraDayTemp = card.querySelector<HTMLDivElement>(':nth-child(2)');\n    if (paraDayTemp === null) return;\n    paraDayTemp.textContent = `${parseInt(dayTemp, 10)}${tempUnit}`;\n    const dayWeatherCode = Number(weatherObject.daily.weather_code[index]);\n    const dayWeatherIcon = selectWeatherDecoder(dayWeatherCode);\n    const oldParaDay = card.querySelector(':nth-child(3)');\n    if (oldParaDay) {\n      oldParaDay.remove();\n    }\n    const paraDayCode = document.createElement('p');\n    paraDayCode.classList.add('day-card-code');\n    paraDayCode.classList.add('wi');\n    paraDayCode.classList.add(`${dayWeatherIcon[0]}`);\n    card.appendChild(paraDayCode);\n  });\n  // event listener to the parent\n  const dayCardsContainer = document.querySelector('.days-container');\n  function dayCardsSelector(event: Event) {\n    const target = event.target as HTMLElement;\n    const card = target.closest('.day-card');\n    if (card) {\n      const index = card.getAttribute('data-index');\n      selectedDay = Number(index);\n      renderMain(retrieveWeather(), retrieveCoordinates());\n    }\n  }\n  dayCardsContainer?.removeEventListener('click', dayCardsSelector);\n  dayCardsContainer?.addEventListener('click', dayCardsSelector);\n}\n\nfunction renderSidebar(weatherObject: typeof defaultWeatherObject) {\n  const weatherContainer = document.getElementById('aside-weather');\n  if (weatherContainer === null) return;\n  const weatherCode = Number(weatherObject.current.weather_code);\n  const weatherCodeIcon = selectWeatherDecoder(weatherCode);\n  const oldParaWeatherIcon = weatherContainer.querySelector('p:first-child');\n  if (oldParaWeatherIcon) {\n    oldParaWeatherIcon.remove();\n  }\n  const paraWeatherIcon = document.createElement('p');\n  paraWeatherIcon.classList.add('current-weather-code');\n  paraWeatherIcon.classList.add('weather-code-icon');\n  paraWeatherIcon.classList.add('wi');\n  paraWeatherIcon.classList.add(`${weatherCodeIcon[0]}`);\n  weatherContainer.prepend(paraWeatherIcon);\n  const paraTemp = weatherContainer.querySelector('p:nth-child(2)');\n  if (paraTemp === null) return;\n  paraTemp.textContent = `${parseInt(\n    weatherObject.current.temperature_2m.toString(),\n    10,\n  )}°`;\n  const paraAppTemp = weatherContainer.querySelector('p:nth-child(3)');\n  if (paraAppTemp === null) return;\n  paraAppTemp.textContent = `Feels like ${parseInt(\n    weatherObject.current.apparent_temperature.toString(),\n    10,\n  )}°`;\n  const humidity = document.querySelector('.current-humidity > p:nth-child(2)');\n  if (humidity === null) return;\n  humidity.textContent = `${weatherObject.current.relative_humidity_2m}%`;\n  const wind = document.querySelector('.current-wind > p:nth-child(2)');\n  if (wind === null) return;\n  wind.textContent = `${parseInt(\n    weatherObject.current.wind_speed_10m.toString(),\n    10,\n  )} km/h`;\n  const precipitation = document.querySelector(\n    '.current-precipitation > p:nth-child(2)',\n  );\n  if (precipitation === null) return;\n  precipitation.textContent = `${weatherObject.current.precipitation} mm`;\n}\n\n// menu city selection\nconst userInput = document.querySelector<HTMLInputElement>('#user-city');\nconst dropdownMenu = document.querySelector('.dropdown-menu')!;\nfunction clearMenu() {\n  dropdownMenu.innerHTML = '';\n}\n\nfunction hideMenu() {\n  dropdownMenu.classList.add('hide');\n  if (userInput === null) return;\n  userInput.value = '';\n  clearMenu();\n}\n\nfunction renderUi(\n  weatherObject: typeof defaultWeatherObject,\n  coordinatesArray: Coordinates[],\n) {\n  renderMain(weatherObject, coordinatesArray);\n  renderCards(weatherObject);\n  renderSidebar(weatherObject);\n  hideMenu();\n}\n\ndocument.addEventListener('click', (event) => {\n  const isClickInsideDropdown = dropdownMenu.contains(event.target as Node);\n  if (!isClickInsideDropdown) {\n    hideMenu();\n  }\n});\n\n// get user unit selection\nlet unit = 'celsius';\nconst unitButton = document.getElementById('unit-button');\nunitButton?.addEventListener('click', async () => {\n  if (unit === 'celsius') {\n    unit = 'fahrenheit';\n    unitButton.classList.remove('wi-celsius');\n    unitButton.classList.add('wi-fahrenheit');\n  } else {\n    unit = 'celsius';\n    unitButton.classList.remove('wi-fahrenheit');\n    unitButton.classList.add('wi-celsius');\n  }\n  const newWeather = await getWeather(retrieveCoordinates(), 0, unit);\n  updateWeather(newWeather);\n  renderUi(retrieveWeather(), retrieveCoordinates());\n});\n\n// search bar\n// debounce function avoids too frequent API calls by setting a timer after an event has been called\nfunction debounce(\n  func: (...args: unknown[]) => void,\n  delay: number,\n): (...args: unknown[]) => void {\n  let debounceTimer: ReturnType<typeof setTimeout>;\n\n  return function (...args: unknown[]): void {\n    if (debounceTimer !== null) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => func(...args), delay);\n  };\n}\n\nconst debouncedInputHandler = debounce(async () => {\n  const firstLocation = document.createElement('p');\n  firstLocation.setAttribute('id', 'first-location');\n  const secondLocation = document.createElement('p');\n  secondLocation.setAttribute('id', 'second-location');\n  const thirdLocation = document.createElement('p');\n  thirdLocation.setAttribute('id', 'third-location');\n  if (userInput?.value === '') {\n    dropdownMenu.classList.add('hide');\n  }\n  if (userInput === null) return;\n  const locationCoordinates = await getCoordinates(userInput.value);\n  const foundCities = locationCoordinates.length;\n  switch (foundCities) {\n    case 1:\n      clearMenu();\n      dropdownMenu.classList.remove('hide');\n      firstLocation.textContent = `${locationCoordinates[0].city}, ${locationCoordinates[0].country}`;\n      firstLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 0, unit);\n        const newCoordinates = locationCoordinates[0];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      dropdownMenu.appendChild(firstLocation);\n      break;\n    case 2:\n      clearMenu();\n      dropdownMenu.classList.remove('hide');\n      firstLocation.textContent = `${locationCoordinates[0].city}, ${locationCoordinates[0].country}`;\n      secondLocation.textContent = `${locationCoordinates[1].city}, ${locationCoordinates[1].country}`;\n      firstLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 0, unit);\n        const newCoordinates = locationCoordinates[0];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      secondLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 1, unit);\n        const newCoordinates = locationCoordinates[1];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      dropdownMenu.appendChild(firstLocation);\n      dropdownMenu.appendChild(secondLocation);\n      break;\n    case 3:\n      clearMenu();\n      dropdownMenu.classList.remove('hide');\n      firstLocation.textContent = `${locationCoordinates[0].city}, ${locationCoordinates[0].state}, ${locationCoordinates[0].country}`;\n      secondLocation.textContent = `${locationCoordinates[1].city}, ${locationCoordinates[1].state}, ${locationCoordinates[1].country}`;\n      thirdLocation.textContent = `${locationCoordinates[2].city}, ${locationCoordinates[2].state}, ${locationCoordinates[2].country}`;\n      firstLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 0, unit);\n        const newCoordinates = locationCoordinates[0];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      secondLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 1, unit);\n        const newCoordinates = locationCoordinates[1];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      thirdLocation.addEventListener('click', async () => {\n        const newWeather = await getWeather(locationCoordinates, 2, unit);\n        const newCoordinates = locationCoordinates[2];\n        updateWeather(newWeather);\n        updateCoordinates(newCoordinates);\n        renderUi(retrieveWeather(), retrieveCoordinates());\n      });\n      dropdownMenu.appendChild(firstLocation);\n      dropdownMenu.appendChild(secondLocation);\n      dropdownMenu.appendChild(thirdLocation);\n      break;\n    default:\n      dropdownMenu.classList.add('hide');\n      clearMenu();\n  }\n}, 500);\n\nuserInput?.addEventListener('input', debouncedInputHandler);\n\nexport default async function init() {\n  renderTime();\n  setInterval(renderTime, 30000);\n  setWelcome();\n  setInterval(renderTime, 60000);\n  const coordinates = retrieveCoordinates();\n  const weather = await getWeather(coordinates, 0, unit);\n  updateWeather(weather);\n  renderUi(retrieveWeather(), coordinates);\n}\n","import './style.css';\nimport init from './modules/ui.ts';\n\ninit();\n"],"names":["toDate","argument","argStr","constructFrom","date","value","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","defaultOptions","getDefaultOptions","startOfWeek","options","weekStartsOn","_b","_a","_d","_c","_date","day","diff","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfDay","getTimezoneOffsetInMilliseconds","utcDate","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","startOfISOWeekYear","fourthOfJanuary","isDate","isValid","startOfYear","cleanDate","formatDistanceLocale","formatDistance","token","count","result","tokenValue","buildFormatLongFn","args","width","dateFormats","timeFormats","dateTimeFormats","formatLong","formatRelativeLocale","formatRelative","_baseDate","_options","buildLocalizeFn","context","valuesArray","defaultWidth","index","eraValues","quarterValues","monthValues","dayValues","dayPeriodValues","formattingDayPeriodValues","ordinalNumber","dirtyNumber","number","rem100","localize","quarter","buildMatchFn","string","matchPattern","matchResult","matchedString","parsePatterns","key","findIndex","pattern","findKey","rest","object","predicate","array","buildMatchPatternFn","parseResult","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","match","enUS","getDayOfYear","getISOWeek","getWeekYear","firstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear","firstWeek","getWeek","addLeadingZeros","targetLength","sign","output","lightFormatters","signedYear","month","dayPeriodEnumValue","numberOfDigits","milliseconds","fractionalSeconds","dayPeriodEnum","formatters","era","signedWeekYear","weekYear","twoDigitYear","isoWeekYear","week","isoWeek","dayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","hours","_localize","timezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","formatTimezoneShort","timestamp","offset","delimiter","absOffset","minutes","dateLongFormatter","timeLongFormatter","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","longFormatters","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","message","subject","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","locale","defaultLocale","_f","_e","_h","_g","originalDate","parts","substring","firstCharacter","longFormatter","cleanEscapedString","formatterOptions","part","formatter","matched","parseISO","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","time","parseTime","parseTimezone","dirtyDate","patterns","dateRegex","timeRegex","timezoneRegex","dateString","timeString","regex","captures","century","isWeekDate","parseDateUnit","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","parseTimeUnit","seconds","validateTime","timezoneString","validateTimezone","fourthOfJanuaryDay","daysInMonths","isLeapYearIndex","_year","_hours","getCoordinates","location","response","getWeather","coordinates","unit","latitude","longitude","defaultWeatherObject","defaultCoordinatesArray","weather","updateWeather","newWeather","updateCoordinates","newCoordinates","retrieveWeather","retrieveCoordinates","getTime","currentDate","currentHour","currentMinute","correctCurrentMinute","showedTime","renderTime","welcomeMessage","setWelcome","selectWeatherDecoder","weatherCode","selectedDay","renderMain","weatherObject","coordinatesArray","selectedLocation","mainTemperature","dayWeatherCode","dayWeatherArrayIcon","dayWeatherArrayText","mainWeatherCode","paraTextWeather","oldParaIconWeather","paraIconWeather","labelTemp","minTemp","maxTemp","labelPrec","precProb","precTotal","labelWind","windSpeed","gustsSpeed","renderCards","card","dayOfTheWeek","paraDay","dayTemp","tempUnit","paraDayTemp","dayWeatherIcon","oldParaDay","paraDayCode","dayCardsContainer","dayCardsSelector","event","renderSidebar","weatherContainer","weatherCodeIcon","oldParaWeatherIcon","paraWeatherIcon","paraTemp","paraAppTemp","humidity","wind","precipitation","userInput","dropdownMenu","clearMenu","hideMenu","renderUi","unitButton","debounce","func","delay","debounceTimer","debouncedInputHandler","firstLocation","secondLocation","thirdLocation","locationCoordinates","init"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]}